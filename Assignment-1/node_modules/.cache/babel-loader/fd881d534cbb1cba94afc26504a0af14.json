{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst intialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  intialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store; // \n///const counterReducer = (state = intialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };const counterReducer = (state = intialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     };\n//   }\n//   return state;\n// };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     };\n//   }\n//   return state;\n// };\n//const store = createStore(counterReducer);\n\n/*console.log(store.getState());\n\nconst counterSubscriber = () => {\n\nconst latestState = store.getState();\nconsole.log(latestState);\n\n}\n\nstore.subscribe(counterSubscriber);\n\nstore.dispatch({type :'increment'})\nstore.dispatch({type : 'decrement'})\n\n\n*/\n//const counterReducer = (state = intialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     };\n//   }\n//   return state;\n// };","map":{"version":3,"sources":["/home/amer/Downloads/01-starting-project/src/store/index.js"],"names":["createSlice","configureStore","intialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggle","store","reducer","counterActions","actions"],"mappings":"AACA,SAASA,WAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AAGA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAeC,EAAAA,WAAW,EAAE;AAA5B,CAApB;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,WAF+B;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KAHO;;AAIRO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KANO;;AAORQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC;AACD,KATO;;AAURC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAZO;AAHqB,CAAD,CAAhC;AAkBA,MAAMW,KAAK,GAAGd,cAAc,CAAC;AACzBe,EAAAA,OAAO,EAAEX,YAAY,CAACW;AADG,CAAD,CAA5B;AAME,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAApC;AACP,eAAeH,KAAf,C,CAEF;AAGA;AACI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIJ;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport { createSlice,configureStore } from \"@reduxjs/toolkit\";\n\n\nconst intialState = { counter: 0 , showCounter: true };\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  intialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst store = configureStore({\n    reducer: counterSlice.reducer,\n  });\n  \n   \n  \n  export const counterActions = counterSlice.actions;\n  export default store;\n\n// \n\n\n///const counterReducer = (state = intialState, action) => {\n    //   if (action.type === \"increment\") {\n    //     return {\n    //       counter: state.counter + 1,\n    //       showCounter: state.showCounter\n    //     };\n    //   }\n    \n    //   if (action.type === \"increase\") {\n    //     return {\n    //       counter: state.counter + action.payload,\n    //       showCounter: state.showCounter,\n    //     };\n    //   }\n    \n    //   if (action.type === \"decrement\") {\n    //     return {\n    //       counter: state.counter - 1,\n    //       showCounter: state.showCounter\n    //     };const counterReducer = (state = intialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.payload,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter\n//     };\n//   }\n//   return state;\n// };\n    //   }\n    \n    //   if (action.type === \"toggle\") {\n    //     return {\n    //       showCounter: !state.showCounter,\n    //       counter: state.counter\n    //     };\n    //   }\n    //   return state;\n    // };\n\n\n\n//const store = createStore(counterReducer);\n/*console.log(store.getState());\n\nconst counterSubscriber = () => {\n\nconst latestState = store.getState();\nconsole.log(latestState);\n\n}\n\nstore.subscribe(counterSubscriber);\n\nstore.dispatch({type :'increment'})\nstore.dispatch({type : 'decrement'})\n\n\n*/\n//const counterReducer = (state = intialState, action) => {\n    //   if (action.type === \"increment\") {\n    //     return {\n    //       counter: state.counter + 1,\n    //       showCounter: state.showCounter\n    //     };\n    //   }\n    \n    //   if (action.type === \"increase\") {\n    //     return {\n    //       counter: state.counter + action.payload,\n    //       showCounter: state.showCounter,\n    //     };\n    //   }\n    \n    //   if (action.type === \"decrement\") {\n    //     return {\n    //       counter: state.counter - 1,\n    //       showCounter: state.showCounter\n    //     };\n    //   }\n    \n    //   if (action.type === \"toggle\") {\n    //     return {\n    //       showCounter: !state.showCounter,\n    //       counter: state.counter\n    //     };\n    //   }\n    //   return state;\n    // };"]},"metadata":{},"sourceType":"module"}