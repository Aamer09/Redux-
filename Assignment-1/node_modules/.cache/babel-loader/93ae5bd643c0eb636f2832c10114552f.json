{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\nimport Counter from \"../components/Counter\";\nconst intitalState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  intitalState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\n\nconst counterReducer = (state = intitalState, action) => {\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.payload,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n\n  return state;\n};\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); //const store = createStore(counterReducer);\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n/*console.log(store.getState());\n\nconst counterSubscriber = () => {\n\nconst latestState = store.getState();\nconsole.log(latestState);\n\n}\n\nstore.subscribe(counterSubscriber);\n\nstore.dispatch({type :'increment'})\nstore.dispatch({type : 'decrement'})\n\n\n*/","map":{"version":3,"sources":["/home/amer/Downloads/01-starting-project/src/store/index.js"],"names":["createStore","createSlice","configureStore","Counter","intitalState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggle","counterReducer","type","payload","store","reducer","counterActions","actions"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,YAAY,GAAI;AAACC,EAAAA,OAAO,EAAE,CAAV;AAAaC,EAAAA,WAAW,EAAG;AAA3B,CAAtB;AAEA,MAAMC,YAAY,GAAGN,WAAW,CAAC;AAEjCO,EAAAA,IAAI,EAAG,SAF0B;AAGjCJ,EAAAA,YAHiC;AAIjCK,EAAAA,QAAQ,EAAG;AAEPC,IAAAA,SAAS,CAACC,KAAD,EAAO;AACZA,MAAAA,KAAK,CAACN,OAAN;AACH,KAJM;;AAKPO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACN,OAAN;AACH,KAPM;;AAQPQ,IAAAA,QAAQ,CAACF,KAAD,EAAOG,MAAP,EAAe;AACnBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC;AACH,KAVM;;AAWPC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACH;;AAbM;AAJsB,CAAD,CAAhC;;AAsBA,MAAMW,cAAc,GAAG,CAACN,KAAK,GAAGP,YAAT,EAAuBU,MAAvB,KAAkC;AACvD,MAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AAELb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CAFpB;AAGLC,MAAAA,WAAW,EAAGK,KAAK,CAACL;AAHf,KAAP;AAKD;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACK,OAD3B;AAELb,MAAAA,WAAW,EAAGK,KAAK,CAACL;AAFf,KAAP;AAID;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAGK,KAAK,CAACL;AAFf,KAAP;AAID;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA6B;AACzB,WAAO;AACLZ,MAAAA,WAAW,EAAG,CAACK,KAAK,CAACL,WADhB;AAELD,MAAAA,OAAO,EAAGM,KAAK,CAACN;AAFX,KAAP;AAKH;;AACD,SAAOM,KAAP;AACD,CA/BD;;AAiCA,MAAMS,KAAK,GAAGlB,cAAc,CAAC;AAEzBmB,EAAAA,OAAO,EAAEd,YAAY,CAACc;AAFG,CAAD,CAA5B,C,CAMA;;AAEA,OAAO,MAAMC,cAAc,GAAGf,YAAY,CAACgB,OAApC;AACP,eAAeH,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {createStore} from \"redux\";\nimport {createSlice} from '@reduxjs/toolkit';\nimport {configureStore} from '@reduxjs/toolkit'\n\nimport Counter from \"../components/Counter\";\n\nconst intitalState =  {counter: 0 ,showCounter : true};\n\nconst counterSlice = createSlice({\n\nname : 'counter',\nintitalState,\nreducers : {\n\n    increment(state){\n        state.counter++;\n    },\n    decrement(state) {\n        state.counter--;\n    },\n    increase(state,action) {\n        state.counter = state.counter + action.amount;\n    },\n    toggle(state) {\n        state.showCounter = !state.showCounter;\n    }\n}\n\n});\n\nconst counterReducer = (state = intitalState, action) => {\n  if (action.type === \"increment\") {\n    return {\n\n      counter: state.counter + 1,\n      showCounter : state.showCounter\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.payload,\n      showCounter : state.showCounter\n    };\n  }\n\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter : state.showCounter\n    };\n  }\n\n  if( action.type === 'toggle'){\n      return {\n        showCounter : !state.showCounter,\n        counter : state.counter\n\n      };\n  }\n  return state;\n};\n\nconst store = configureStore({\n\n    reducer: counterSlice.reducer\n\n});\n\n//const store = createStore(counterReducer);\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n\n/*console.log(store.getState());\n\nconst counterSubscriber = () => {\n\nconst latestState = store.getState();\nconsole.log(latestState);\n\n}\n\nstore.subscribe(counterSubscriber);\n\nstore.dispatch({type :'increment'})\nstore.dispatch({type : 'decrement'})\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}