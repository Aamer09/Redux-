{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newitem = action.payload;\n      const existingItem = state.items.find(item => item.id === newitem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newitem.id,\n          price: newitem.price,\n          quantity: 1,\n          totalPrice: newitem.price,\n          name: newitem.title\n        });\n      }\n    },\n\n    removeItemFromCart() {}\n\n  }\n});\nexport default cartSlice;","map":{"version":3,"sources":["/home/amer/Downloads/01-starting-project/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newitem","payload","existingItem","find","item","id","push","itemId","price","quantity","totalPrice","title","removeItemFromCart"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE;AAFH,GAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;;AACA,UAAI,CAACH,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AACfC,UAAAA,MAAM,EAAEP,OAAO,CAACK,EADD;AAEfG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAEV,OAAO,CAACQ,KAJL;AAKfhB,UAAAA,IAAI,EAAEQ,OAAO,CAACW;AALC,SAAjB;AAOD;AACF,KAbO;;AAeRC,IAAAA,kBAAkB,GAAG,CAAE;;AAff;AAPkB,CAAD,CAA7B;AA0BA,eAAerB,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n  },\n\n  reducers: {\n    addItemToCart(state, action) {\n      const newitem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newitem.id);\n      if (!existingItem) {\n        state.items.push({\n          itemId: newitem.id,\n          price: newitem.price,\n          quantity: 1,\n          totalPrice: newitem.price,\n          name: newitem.title,\n        });\n      }\n    },\n\n    removeItemFromCart() {},\n  },\n});\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}